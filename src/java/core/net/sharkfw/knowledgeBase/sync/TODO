[?] public void response.insert(Knowledge k, String receiveraddress) throws SharkException; in KEPConnection 2. Argument
entfernen, antwort soll immer an den sender zurrückgeschickt werden

Soll ein Peer die Möglichkeit haben, ein anderes Peer darum zu bitten, die Information zu löschen?
Sollten leere ContextPoints nicht gesynct werden?
    => Entweder ein leerer CP wird so übernommen, also werden alle Informationen auf der Empfängerseite gelöscht
    => Oder der CP wird bei Empfangen eines leeren CPs explizit gedroppt - was kein weitergeben der Information ermöglicht

Wie wird Löschaufforderung eines ganzen ContextPoints sonst vermittelt?

KnowledgeBaseListener & STSetListener:
    - contextPointChanged wird nicht getriggert (weder ändern noch hinzufügen noch löschen einer Information triggert das)
    - getPeerSTSet().merge triggert nicht peerAdded
    - getPeerSTSet().remove triggert nicht peerRemoved
    - removeSemanticTag triggtert nicht
        => im Prinzip muss die AbstractSharkKb auf ihre peerSTSet, SpatialSTSet etc listener setzen

Features:
    - Vorhaben(Syncs) => Protokoll implementieren
        1. Interests festmachen (Was hat Peer A in den Syncbuckets für Peer B)
        2. Contextcoordiantes vergleichen (Was braucht Peer B davon tatsächlich)
        3. Daten senden
        -> ausser für WifiDirect(zweiter Check auf leeres all interesse; siehe unten)
    - Contextspaces syncen
    - Bucketlist persistent
    - eigeninformation auf allinteresse

-> SyncKP mit Fragmentierungsparameter-Schalter(Topic Peer Location) in Schritt 2

IMSKB voc = IMSKB();
for CP in CPs:
    STSet t = kb.getTopics().fragment(T, FP-Topics);
    voc.getTopics().merge(t);
(die IMSKB kann dann auch als Knowledge interpretiert werden)
